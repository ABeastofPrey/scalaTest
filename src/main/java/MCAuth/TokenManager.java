package MCAuth;

import static MCAuth.MCAuth.verifyToken;
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.servotronix.mcwebserver.MCServer;
import com.servotronix.mcwebserver.Utils;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.eclipse.jetty.server.Response;
import org.json.JSONObject;
import spark.Request;

public class TokenManager {
  
  public static List<String> tokens = new ArrayList<String>();
  
  /* 
    THIS TOKEN IS USED TO AUTHENTICATE A PAGE'S ORIGIN
    IN ORDER TO MAKE SURE IT'S A PAGE THAT WAS ORIGINATED IN THE WEBSERVER
    AND NOT FROM A USER.
    THIS TOKEN WILL BE SAVED IN THE SESSION AS "securityToken".
  */
  public static String generateToken() {
    JSONObject data = new JSONObject();
    data.put("id", new Random().nextInt(Integer.MAX_VALUE));
    try {
      Algorithm algorithm = Algorithm.HMAC256("Servotronix");
      String token = JWT.create()
        .withIssuer("auth0")
        .withSubject(data.toString())
        .sign(algorithm);
      tokens.add(token);
      return token;
    } catch (UnsupportedEncodingException exception){
      return null;
    } catch (JWTCreationException exception){
      return null;
    }
  }
  
  /* 
    CHECKS IF A TOKEN IS IN THE LIST OF TOKENS THAT WAS GENERATED BY THE SERVER
  */
  public static boolean verifyToken(String token) {
    return tokens.contains(token);
  }
  
  /* 
    RETURNS TRUE ONLY IF THE PAGE WAS ORIGINATED IN THE SERVER, OR IF THE USER HAS THE WEB API
  */
  public static boolean hasPublicAPIAccess(Request request) {
    boolean hasWebAPI = MCServer.instance.getMCInfo().getFeatures().contains("WebAPI");
    return (hasPrivateAPIAccess(request) || hasWebAPI);
  }
  
  /* 
    RETURNS TRUE ONLY IF THE PAGE WAS ORIGINATED IN THE SERVER
  */
  public static boolean hasPrivateAPIAccess(Request request) {
    String token = request.headers("Authorization");
    boolean authProvided = false;
    if (token != null) {
      token = token.split(" ")[1];
      authProvided = MCAuth.verifyToken(token) != -1;
    }
    String securityToken = request.session().attribute("securityToken");
    return true; //TODO: MAKE SURE SECURITY TOEKN WORKS AND THEN REMOVE THIS LINE
    //return TokenManager.verifyToken(securityToken) || authProvided;
  }
}
